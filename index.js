const express = require("express");
const mongoose = require("mongoose");
require("dotenv").config();

const app = express();
const PORT = process.env.PORT || 3000;

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
mongoose
  .connect(process.env.MONGO_URI, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  })
  .then(() => console.log("‚úÖ Connected to MongoDB"))
  .catch((err) => console.error("‚ùå MongoDB connection error:", err));

// –ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const userSchema = new mongoose.Schema({
  login: { type: String, unique: true },
  hwid: String,
  timeLeft: Number,
});
const User = mongoose.model("User", userSchema);

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
app.post("/authorize", async (req, res) => {
  const { login, hwid } = req.body;
  if (!login || !hwid)
    return res
      .status(400)
      .json({ status: "error", message: "login –∏ hwid –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });

  let user = await User.findOne({ login });

  if (user) {
    if (user.hwid !== hwid) {
      return res.status(400).json({
        status: "error",
        message: "–≠—Ç–æ—Ç –ª–æ–≥–∏–Ω –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –∂–µ–ª–µ–∑—É.",
      });
    }
    return res.json({ status: "ok", timeLeft: user.timeLeft });
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ hwid
  const hwidExists = await User.findOne({ hwid });
  if (hwidExists) {
    return res.status(400).json({
      status: "error",
      message: "–≠—Ç–æ—Ç HWID —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.",
    });
  }

  user = new User({ login, hwid, timeLeft: 60 });
  await user.save();
  return res.json({ status: "ok", timeLeft: 60 });
});

// –í—ã—Ö–æ–¥
app.post("/logout", async (req, res) => {
  const { login } = req.body;
  if (!login)
    return res
      .status(400)
      .json({ status: "error", message: "login –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });

  const result = await User.deleteOne({ login });
  if (result.deletedCount === 0) {
    return res
      .status(404)
      .json({ status: "error", message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
  }

  return res.json({ status: "ok", message: "–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω" });
});

// –°–ø–∏—Å–∞—Ç—å –≤—Ä–µ–º—è
app.post("/consume", async (req, res) => {
  const { login, minutes, hwid } = req.body;
  if (!login || typeof minutes !== "number" || !hwid)
    return res
      .status(400)
      .json({ status: "error", message: "login, minutes –∏ hwid –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });

  const user = await User.findOne({ login });
  if (!user)
    return res
      .status(404)
      .json({ status: "error", message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
  if (user.hwid !== hwid)
    return res
      .status(403)
      .json({ status: "error", message: "HWID –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç" });
  if (user.timeLeft < minutes)
    return res
      .status(400)
      .json({ status: "error", message: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏" });

  user.timeLeft -= minutes;
  await user.save();
  return res.json({ status: "ok", timeLeft: user.timeLeft });
});

// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –≤—Ä—É—á–Ω—É—é
app.post("/set-time", async (req, res) => {
  const { login, minutes, hwid } = req.body;
  if (!login || typeof minutes !== "number" || !hwid)
    return res
      .status(400)
      .json({ status: "error", message: "login, minutes –∏ hwid –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });

  const user = await User.findOne({ login });
  if (!user)
    return res
      .status(404)
      .json({ status: "error", message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
  if (user.hwid !== hwid)
    return res
      .status(403)
      .json({ status: "error", message: "HWID –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç" });

  user.timeLeft = minutes;
  await user.save();
  return res.json({ status: "ok", login, timeLeft: minutes });
});

app.listen(PORT, () => {
  console.log(`üöÄ Server listening on port ${PORT}`);
});
